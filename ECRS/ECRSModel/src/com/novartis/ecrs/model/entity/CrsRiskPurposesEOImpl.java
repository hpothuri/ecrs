package com.novartis.ecrs.model.entity;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 12 17:33:39 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrsRiskPurposesEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        RiskPurposeId {
            public Object get(CrsRiskPurposesEOImpl obj) {
                return obj.getRiskPurposeId();
            }

            public void put(CrsRiskPurposesEOImpl obj, Object value) {
                obj.setRiskPurposeId((Integer)value);
            }
        }
        ,
        RiskPurposeCode {
            public Object get(CrsRiskPurposesEOImpl obj) {
                return obj.getRiskPurposeCode();
            }

            public void put(CrsRiskPurposesEOImpl obj, Object value) {
                obj.setRiskPurposeCode((String)value);
            }
        }
        ,
        RiskPurposeDesc {
            public Object get(CrsRiskPurposesEOImpl obj) {
                return obj.getRiskPurposeDesc();
            }

            public void put(CrsRiskPurposesEOImpl obj, Object value) {
                obj.setRiskPurposeDesc((String)value);
            }
        }
        ,
        ActiveFlag {
            public Object get(CrsRiskPurposesEOImpl obj) {
                return obj.getActiveFlag();
            }

            public void put(CrsRiskPurposesEOImpl obj, Object value) {
                obj.setActiveFlag((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CrsRiskPurposesEOImpl object);

        public abstract void put(CrsRiskPurposesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int RISKPURPOSEID = AttributesEnum.RiskPurposeId.index();
    public static final int RISKPURPOSECODE = AttributesEnum.RiskPurposeCode.index();
    public static final int RISKPURPOSEDESC = AttributesEnum.RiskPurposeDesc.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CrsRiskPurposesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.novartis.ecrs.model.entity.CrsRiskPurposesEO");
    }

    /**
     * Gets the attribute value for RiskPurposeId, using the alias name RiskPurposeId.
     * @return the value of RiskPurposeId
     */
    public Integer getRiskPurposeId() {
        return (Integer)getAttributeInternal(RISKPURPOSEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RiskPurposeId.
     * @param value value to set the RiskPurposeId
     */
    public void setRiskPurposeId(Integer value) {
        setAttributeInternal(RISKPURPOSEID, value);
    }

    /**
     * Gets the attribute value for RiskPurposeCode, using the alias name RiskPurposeCode.
     * @return the value of RiskPurposeCode
     */
    public String getRiskPurposeCode() {
        return (String)getAttributeInternal(RISKPURPOSECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RiskPurposeCode.
     * @param value value to set the RiskPurposeCode
     */
    public void setRiskPurposeCode(String value) {
        setAttributeInternal(RISKPURPOSECODE, value);
    }

    /**
     * Gets the attribute value for RiskPurposeDesc, using the alias name RiskPurposeDesc.
     * @return the value of RiskPurposeDesc
     */
    public String getRiskPurposeDesc() {
        return (String)getAttributeInternal(RISKPURPOSEDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for RiskPurposeDesc.
     * @param value value to set the RiskPurposeDesc
     */
    public void setRiskPurposeDesc(String value) {
        setAttributeInternal(RISKPURPOSEDESC, value);
    }

    /**
     * Gets the attribute value for ActiveFlag, using the alias name ActiveFlag.
     * @return the value of ActiveFlag
     */
    public String getActiveFlag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActiveFlag.
     * @param value value to set the ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param riskPurposeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer riskPurposeId) {
        return new Key(new Object[]{riskPurposeId});
    }

    public void doDML(int operation, TransactionEvent e) {
        if(operation == DML_INSERT)
            this.setRiskPurposeId((Integer)(new SequenceImpl("crs_risk_purposes_seq",getDBTransaction()).getSequenceNumber()).intValue());
        super.doDML(operation, e);
    }
}
