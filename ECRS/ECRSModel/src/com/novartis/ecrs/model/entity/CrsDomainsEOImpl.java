package com.novartis.ecrs.model.entity;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 08 19:41:03 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrsDomainsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DomainId {
            public Object get(CrsDomainsEOImpl obj) {
                return obj.getDomainId();
            }

            public void put(CrsDomainsEOImpl obj, Object value) {
                obj.setDomainId((Integer)value);
            }
        }
        ,
        DomainName {
            public Object get(CrsDomainsEOImpl obj) {
                return obj.getDomainName();
            }

            public void put(CrsDomainsEOImpl obj, Object value) {
                obj.setDomainName((String)value);
            }
        }
        ,
        DomainDesc {
            public Object get(CrsDomainsEOImpl obj) {
                return obj.getDomainDesc();
            }

            public void put(CrsDomainsEOImpl obj, Object value) {
                obj.setDomainDesc((String)value);
            }
        }
        ,
        ActiveFlag {
            public Object get(CrsDomainsEOImpl obj) {
                return obj.getActiveFlag();
            }

            public void put(CrsDomainsEOImpl obj, Object value) {
                obj.setActiveFlag((String)value);
            }
        }
        ,
        CrsRiskRelationsEO {
            public Object get(CrsDomainsEOImpl obj) {
                return obj.getCrsRiskRelationsEO();
            }

            public void put(CrsDomainsEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CrsDomainsEOImpl object);

        public abstract void put(CrsDomainsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DOMAINID = AttributesEnum.DomainId.index();
    public static final int DOMAINNAME = AttributesEnum.DomainName.index();
    public static final int DOMAINDESC = AttributesEnum.DomainDesc.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int CRSRISKRELATIONSEO = AttributesEnum.CrsRiskRelationsEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CrsDomainsEOImpl() {
    }

    /**
     * Gets the attribute value for DomainId, using the alias name DomainId.
     * @return the value of DomainId
     */
    public Integer getDomainId() {
        return (Integer)getAttributeInternal(DOMAINID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DomainId.
     * @param value value to set the DomainId
     */
    public void setDomainId(Integer value) {
        setAttributeInternal(DOMAINID, value);
    }

    /**
     * Gets the attribute value for DomainName, using the alias name DomainName.
     * @return the value of DomainName
     */
    public String getDomainName() {
        return (String)getAttributeInternal(DOMAINNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DomainName.
     * @param value value to set the DomainName
     */
    public void setDomainName(String value) {
        setAttributeInternal(DOMAINNAME, value);
    }

    /**
     * Gets the attribute value for DomainDesc, using the alias name DomainDesc.
     * @return the value of DomainDesc
     */
    public String getDomainDesc() {
        return (String)getAttributeInternal(DOMAINDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DomainDesc.
     * @param value value to set the DomainDesc
     */
    public void setDomainDesc(String value) {
        setAttributeInternal(DOMAINDESC, value);
    }

    /**
     * Gets the attribute value for ActiveFlag, using the alias name ActiveFlag.
     * @return the value of ActiveFlag
     */
    public String getActiveFlag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActiveFlag.
     * @param value value to set the ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getCrsRiskRelationsEO() {
        return (RowIterator)getAttributeInternal(CRSRISKRELATIONSEO);
    }

    /**
     * @param domainId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer domainId) {
        return new Key(new Object[]{domainId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.novartis.ecrs.model.entity.CrsDomainsEO");
    }
    
    public void doDML(int operation, TransactionEvent e) {
        if(operation == DML_INSERT)
            this.setDomainId((Integer)(new SequenceImpl("crs_domains_seq",getDBTransaction()).getSequenceNumber()).intValue());
        super.doDML(operation, e);
    }
}
